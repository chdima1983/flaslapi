name: CI/CD_Homework

on:
  push:
    branches:
      - master
#wokflow on another folk
#  workflow_dispatch:
    

env:
  REGISTRY: chdima/ci_cd_workshop

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          max-line-lenght: "100"
          ignore: "E501,E502,E302,F841,F401,W291,W293,E305,E1,E2"
          path: "flask-api"

  build_and_push:
    runs-on: ubuntu-latest
    name: Build and push docker image
    needs: lint
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.commit_hash }}
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - id: commit_hash
        run: echo "::set-output name=commit_hash::${GITHUB_SHA::7}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}:${{ steps.commit_hash.outputs.commit_hash }}
  
  deploy:
    needs: build_and_push
    env:
      USERNAME: ubuntu
    strategy:
      fail-fast: false
      matrix:
        os: ['3.120.209.240', '18.184.105.215']
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy to EC2 instanse via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ matrix.os }}
          username: ${{ env.USERNAME }}
          key: ${{ secrets.ID_RSA }}
          envs: ${{ secrets.DOCKER_USER }}, ${{ secrets.DOCKERHUB_TOKEN }}
          port: 22
          script: |
            # login docker
            docker login -u $DOCKER_USER -p $DOCKERHUB_TOKEN
            docker stop full_app
            docker stop full_db
            docker rm full_app
            docker rm full_db
            docker network rm mynet
            # Create network
            docker network create mynet --subnet=172.20.18.0/24
            #Run new MySQL database
            docker run \
            --name db \
            -e MYSQL_ROOT_HOST=${{ secrets.DB_HOSTNAME }} \
            -e MYSQL_USER=${{ secrets.DB_USERNAME }} \
            -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e MYSQL_DATABASE=${{ secrets.DB_NAME }} \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -v $HOME/db:/var/lib/mysql \
            --network mynet \
            -d mysql:5.7
            # Run a new container from a new image
            docker run -d \
            --restart always \
            -e DB_HOSTNAME=${{ secrets.DB_HOSTNAME }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --network mynet \
            -p 5000:5000 \
            --name full_app \
            ${{ env.REGISTRY }}:${{ needs.build_and_push.outputs.commit_hash }}
      
  Report:
    needs: deploy
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: Build and Run Tests
        run: curl -v http://3.120.209.240:5000 && curl -v http://18.184.105.215:5000
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'